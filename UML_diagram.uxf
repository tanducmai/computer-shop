<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>8</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>768</y>
      <w>272</w>
      <h>272</h>
    </coordinates>
    <panel_attributes>CPU
--
- cores: int
- frequency_ghz: float

--
+ __init__(name: str, price: float,
                 cores: int, frequency_ghz: float): void
+ __str__(): str
_+ parse(csv_string: str): CPU_
_+ input(): CPU_
_+ input_cores(): int_
_+ input_frequency_ghz(): float_
+ get_cores(): int
+ get_frequency_ghz(): float
+ equals(other: Any): bool
+ to_csv_string(): str

--
Responsibilities
_-- Takes and validates input for cores and frequency._
_-- Contructs a CPU based on validated inputs._</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>304</x>
      <y>768</y>
      <w>288</w>
      <h>272</h>
    </coordinates>
    <panel_attributes>GraphicsCard
--
-frequency_mhz: int
-memory_gb: int

--
+ __init__(name: str, price: float,
                 frequency_mhz: int, memory_gb: int): void
+ __str__(): str
_+ parse(csv_string: str): GraphicsCard_
_+ input(): GraphicsCard_
_+ input_frequency_mhz(): int_
_+ input_memory_gb(): int_
+ get_frequency_mhz(): int
+ get_memory_gb(): int
+ equals(other: Any): bool
+ to_csv_string(): str

--
Responsibilities
_-- Takes and validates input for frequency and memory._
_-- Contructs a GraphicsCard based on validated inputs._
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>608</x>
      <y>768</y>
      <w>312</w>
      <h>312</h>
    </coordinates>
    <panel_attributes>Memory
--
-capacity_gb: int
-frequency_mhz: int
-ddr: str

--
+ __init__(name: str, price: float,
                 capacity_gb: int, frequency_mhz: int, ddr: str): void
+ __str__(): str
_+ parse(csv_string: str): Memory_
_+ input(): Memory_
_+ input_capacity_gb(): int_
_+ input_frequency_mhz(): int_
_+ input_ddr(): str_
+ get_capacity_gb(): int
+ get_frequency_mhz(): int
+ get_ddr(): str
+ equals(other: Any): bool
+ to_csv_string(): str

--
Responsibilities
_-- Takes and validates input for capacity, frequency, and ddr._
_-- Contructs a Memory based on validated inputs._</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>928</x>
      <y>768</y>
      <w>296</w>
      <h>272</h>
    </coordinates>
    <panel_attributes>Storage
--
-capacity_gb: int
-storage_type: str

--
+ __init__(name: str, price: float,
                 capacity_gb: int, storage_type: str): void
+ __str__(): str
_+ parse(csv_string: str): Storage_
_+ input(): Storage_
_+ input_capacity_gb(): int_
_+ input_storage_type(): str_
+ get_capacity_gb(): int
+ get_storage_type(): str
+ equals(other: Any): bool
+ to_csv_string(): str

--
Responsibilities
_-- Takes and validates input for capacity and storage type._
_-- Contructs a Storage based on validated inputs._</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>472</x>
      <y>392</y>
      <w>256</w>
      <h>296</h>
    </coordinates>
    <panel_attributes>/ComputerPart/
--
- name: str
- price: float

--
+ __init__(): void
_/+ parse(): void/_
_/+ input(): void/_
/+ __str__(): void/
/+ to_csv_string(): void/
_+ input_name(): str_
_+ input_price(): float_
_+ csv_string_to_list(csv_string: str): list_
+ get_name(): str
+ get_price(): float
+ equals(other: Any): bool

--
Responsibilities
_-- Displays the Part List menu._
_-- Takes and validates input for name and price._
-- The blueprint for CPU, GraphicsCard, Memory,
and Storage.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>128</x>
      <y>712</y>
      <w>968</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=-
</panel_attributes>
    <additional_attributes>10.0;70.0;10.0;20.0;400.0;20.0;400.0;70.0;400.0;20.0;790.0;20.0;790.0;70.0;790.0;20.0;1190.0;20.0;1190.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>592</x>
      <y>680</y>
      <w>24</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>432</x>
      <y>8</y>
      <w>336</w>
      <h>312</h>
    </coordinates>
    <panel_attributes>PartList
--
- items: ComputerPart[0..*]
- stock: dict

--
+ __init__(): void
+__str__(): str
+ __len__(): int
+ get_item(): list
+ get_stock(): dict
+ add_to_part_list(new_part: ComputerPart, 
                              print_status: bool = False): void
+ get_part_using_name(part_name: str): ComputerPart | str
+ get_part_using_position(part_position: int): ComputerPart | str
+ remove_part_using_name(part_name: str): None | str
+ remove_part_using_position(part_position: int): None | str
+ save_to_csv(filename: str = 'database'): void

--
Responsibilities
-- Contains a list of parts (ComputerParts) currently in store.
-- Manages each of the part's stock.
-- Searches and removes a part using name or position.
-- Save the list to a csv file.
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>16</y>
      <w>296</w>
      <h>296</h>
    </coordinates>
    <panel_attributes>WishList
--
- username: str
- items: ComputerPart[0..*]
- stock: dict

--
+ __init__(): void
+__str__(): str
+ __len__(): int
+ set_username(): void
+ get_username(): str
+ get_item(): list
+ get_stock(): dict
- get_total_cost(): float
- is_valid_computer(): bool

--
Responsibilities
-- Exists with the username.
-- Contains a list of parts (ComputerParts) the user chose.
-- Counts how many each instances of each part in there.
-- Calculates the total costs of all parts.
-- Determines if the parts make up a valid computer.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>288</x>
      <y>160</y>
      <w>160</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>180.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>592</x>
      <y>312</y>
      <w>40</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=0..1
m2=0..*</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1024</x>
      <y>0</y>
      <w>328</w>
      <h>312</h>
    </coordinates>
    <panel_attributes>CommandPrompt
--
_- menu: defaultdict_
- part_list: PartList
- wish_list: WishList

--
+ __init__(): void
_- set_menu(): void_
+ display_menu(menu_type: str): void
+ get_part_list(): PartList
+ get_wish_list(): WishList | None
+ set_wish_list(obj: WishList | None): void
+ prompt_for_option(limit: int): int
- read_from_csv(): void

--
Responsibilities
-- The user interface of the system.
-- Manages the PartList and WishList objects.
-- Displays the main and wish list menus.
-- Allows the user to create a wish list.
-- Allows the user to purchase ComputerParts.
-- Prompts the user for an option every time the menu appears.
-- Reads from the database.csv file and fills up the part list.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1576</x>
      <y>104</y>
      <w>224</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>/Question/
--
- cmd: CommandPrompt
--
+ __init__(cmd: CommandPrompt): void
+ get_cmd(): CommandPrompt

--
Responsibilities
-- The blueprint for every question the 
CommandPrompt can ask the user.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1544</x>
      <y>536</y>
      <w>296</w>
      <h>192</h>
    </coordinates>
    <panel_attributes>NewWishList
--

--
+ __init__(cmd: CommandPrompt,
                 execute: bool = True): void
+ look_up_part_list(part_name: str): bool
+ look_up_wish_list(part_name: str): bool

--
Responsibilities
-- Takes input for the user's name.
-- Constructs a new wish list.
-- Display the wish list menu.
-- Looks up the part list or wish list with the name of a part.
-- The blueprint for options in the wish list menu.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1896</x>
      <y>536</y>
      <w>232</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>ListDatabase
--

--
+ __init__(cmd: CommandPrompt,
                 execute: bool = True): void

--
Responsibilities
-- Displays the PartList object.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>816</x>
      <y>536</y>
      <w>352</w>
      <h>152</h>
    </coordinates>
    <panel_attributes>Close
--

--
+ __init__(cmd: CommandPrompt,
                 current_menu: str = 'Main Menu',
                 execute: bool = True): void

--
Responsibilities
-- Either closes the main menu or the wish list menu.
-- If closing the main menu, save the part list to the file database.csv.
-- Otherwise, moves the items in wish list back to the part list.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1224</x>
      <y>536</y>
      <w>264</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>AddPartToDatabase
--

--
+ __init__(cmd: CommandPrompt,
                 execute: bool = True): void

--
Responsibilities
-- Display the part types menu.
-- Prompts user for a choice of a part type.
-- Calls that part's input() method to construct it.
-- Looks up the part list with the newly created part.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1464</x>
      <y>816</y>
      <w>216</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>RemoveFromWishList
--

--
+ __init__(cmd: CommandPrompt,
                 execute: bool = True): void

--
Responsibilities
-- Prompts the user for the name of a part.
-- Looks up the wish list to see if the part
exists.
-- If it does, removes it and return stock to 
part list.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1696</x>
      <y>816</y>
      <w>216</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>PurchaseAndClose
--

--
+ __init__(cmd: CommandPrompt,
                 execute: bool = True): void

--
Responsibilities
-- Save the wish list to a csv file whose 
name is the user's name.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1232</x>
      <y>816</y>
      <w>216</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>ShowWishList
--

--
+ __init__(cmd: CommandPrompt,
                 execute: bool = True): void

--
Responsibilities
-- Displays the WishList object.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1336</x>
      <y>752</y>
      <w>712</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=-
</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;20.0;300.0;20.0;300.0;80.0;300.0;20.0;590.0;20.0;590.0;80.0;590.0;20.0;870.0;20.0;870.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1928</x>
      <y>816</y>
      <w>216</w>
      <h>152</h>
    </coordinates>
    <panel_attributes>AddFromDatabase
--

--
+ __init__(cmd: CommandPrompt,
                 execute: bool = True): void

--
Responsibilities
-- Displays all the items in the part list.
-- Prompts the user for the name of a part.
-- Looks up the part list to see if the part
exists and enough stock is remaining.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1680</x>
      <y>720</y>
      <w>24</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>984</x>
      <y>496</y>
      <w>1040</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0;470.0;10.0;470.0;50.0;470.0;10.0;1280.0;10.0;1280.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1680</x>
      <y>224</y>
      <w>24</w>
      <h>328</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;390.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>760</x>
      <y>144</y>
      <w>280</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=0..1
m2=1
&lt; constructs</panel_attributes>
    <additional_attributes>330.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1344</x>
      <y>160</y>
      <w>248</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=0..*
asks users &gt;</panel_attributes>
    <additional_attributes>10.0;20.0;290.0;20.0</additional_attributes>
  </element>
</diagram>
